From 64c8f32b0349c33fb8382784af468338078851f9 Mon Sep 17 00:00:00 2001
From: Hannes von Haugwitz <hannes@vonhaugwitz.com>
Date: Thu, 7 Aug 2025 18:04:41 +0200
Subject: [PATCH] Escape control characters in report and log output

* this addresses CVE-2025-54389
* thanks to Rajesh Pangare for reporting this issue

Upstream Patch Reference: https://github.com/aide/aide/commit/64c8f32b0349c33fb8382784af468338078851f9.patch
---
 include/util.h |  7 +++++++
 src/aide.c     |  3 ++-
 src/util.c     | 43 +++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 52 insertions(+), 1 deletion(-)

diff --git a/include/util.h b/include/util.h
index 7998853..87e32de 100644
--- a/include/util.h
+++ b/include/util.h
@@ -32,6 +32,8 @@
 
 #define ISXDIGIT(x) isxdigit ((unsigned char)(x))
 
+#define MEMORY_ALLOCATION_FAILURE 22
+
 #define CLEANDUP(x) (contains_unsafe (x) ? encode_string (x) : strdup (x))
 
 #ifndef HAVE_STRICMP
@@ -44,6 +46,11 @@ url_t* parse_url(char*);
 
 int contains_unsafe(const char*);
 
+void* checked_malloc(size_t);
+
+char *strnesc(const char *, size_t);
+char *stresc(const char *);
+
 void decode_string(char*);
 
 char* encode_string(const char*);
diff --git a/src/aide.c b/src/aide.c
index 8dd38b7..fb0c574 100644
--- a/src/aide.c
+++ b/src/aide.c
@@ -186,7 +186,8 @@ static int read_param(int argc,char**argv)
                 conf->limit=malloc(strlen(optarg)+1);
                 strcpy(conf->limit,optarg);
                 if((conf->limit_crx=pcre_compile(conf->limit, PCRE_ANCHORED, &pcre_error, &pcre_erroffset, NULL)) == NULL) {
-                    error(0,_("Error in limit regexp '%s' at %i: %s\n"), conf->limit, pcre_erroffset, pcre_error);
+		    char * limit_safe = stresc(conf->limit);
+                    error(0,_("Error in limit regexp '%s' at %i: %s\n"), limit_safe, pcre_erroffset, pcre_error);
                     exit(INVALID_ARGUMENT_ERROR);
                 }
                 error(200,_("Limit set to '%s'\n"), conf->limit);
diff --git a/src/util.c b/src/util.c
index 525eab5..e927ada 100644
--- a/src/util.c
+++ b/src/util.c
@@ -150,6 +150,49 @@ url_t* parse_url(char* val)
   return u;
 }
 
+static size_t escape_str(const char *unescaped_str, char *str, size_t s) {
+    size_t n = 0;
+    size_t i = 0;
+    char c;
+    while (i < s && (c = unescaped_str[i])) {
+        if ((c >= 0 && (c < 0x1f || c == 0x7f)) ||
+            (c == '\\' && isdigit(unescaped_str[i+1])
+                       && isdigit(unescaped_str[i+2])
+                       && isdigit(unescaped_str[i+3])
+                ) ) {
+            if (str) { snprintf(&str[n], 5, "\\%03o", c); }
+            n += 4;
+        } else {
+            if (str) { str[n] = c; }
+            n++;
+        }
+        i++;
+    }
+    if (str) { str[n] = '\0'; }
+    n++;
+    return n;
+}
+void* checked_malloc(size_t size) {
+    void * p = malloc(size);
+    if (p == NULL) {
+        error(0, "malloc: failed to allocate %lu bytes of memory", (unsigned long) size);
+        exit(MEMORY_ALLOCATION_FAILURE);
+    }
+    return p;
+}
+
+char *strnesc(const char *unescaped_str, size_t s) {
+    int n = escape_str(unescaped_str, NULL, s);
+    char *str = checked_malloc(n);
+    escape_str(unescaped_str, str, s);
+    return str;
+}
+
+char *stresc(const char *unescaped_str) {
+    return strnesc(unescaped_str, strlen(unescaped_str));
+}
+
+
 /* Returns 1 if the string contains unsafe characters, 0 otherwise.  */
 int contains_unsafe (const char *s)
 {
-- 
2.45.2


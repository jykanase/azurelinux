From 54a6d0d9d5f14b81961d66373c0291bf4af4135a Mon Sep 17 00:00:00 2001
From: Hannes von Haugwitz <hannes@vonhaugwitz.com>
Date: Thu, 7 Aug 2025 18:08:25 +0200
Subject: [PATCH] Fix null pointer dereference after reading incorrectly
 encoded xattr attributes from database

* fix handling of empty xattr values
* fix handling of xattr keys containing a comma
* this addresses CVE-2025-54409
* thanks to Rajesh Pangare for reporting this issue

Upstream Patch Reference: https://github.com/aide/aide/commit/54a6d0d9d5f14b81961d66373c0291bf4af4135a.patch
---
 include/util.h |  2 ++
 src/db.c       | 26 ++++++++++++++++++--------
 src/util.c     | 10 +++++++++-
 3 files changed, 29 insertions(+), 9 deletions(-)

diff --git a/include/util.h b/include/util.h
index 87e32de..97bf9c8 100644
--- a/include/util.h
+++ b/include/util.h
@@ -48,6 +48,8 @@ int contains_unsafe(const char*);
 
 void* checked_malloc(size_t);
 
+void* checked_strdup(const char *);
+
 char *strnesc(const char *, size_t);
 char *stresc(const char *);
 
diff --git a/src/db.c b/src/db.c
index 73e5f05..c12f9a6 100644
--- a/src/db.c
+++ b/src/db.c
@@ -605,19 +605,29 @@ db_line* db_char2line(char** ss,int db){
           num = 0;
           while (num < line->xattrs->num)
           {
-            byte  *val = NULL;
-            size_t vsz = 0;
-            
             tval = strtok(NULL, ",");
             char * tmp = strdup(tval);
             line->xattrs->ents[num].key = db_readchar(tmp);
             free(tmp);
             tval = strtok(NULL, ",");
-            val = base64tobyte(tval, strlen(tval), &vsz);
-            line->xattrs->ents[num].val = val;
-            line->xattrs->ents[num].vsz = vsz;
-
-            ++num;
+	    if (strcmp(tval,"0") != 0) {
+                line->xattrs->ents[num].val = decode_base64(tval, strlen(tval), &line->xattrs->ents[num].vsz);
+            } else {
+                line->xattrs->ents[num].val = checked_strdup("");
+                line->xattrs->ents[num].vsz = 0;
+            }
+            if (line->xattrs->ents[num].val == NULL) {
+                error(0,_("Could not read %s from database"),line->filename);
+                for (int j = num; j >= 0 ; --j) {
+                    free(line->xattrs->ents[j].key);
+                    line->xattrs->ents[j].key = NULL;
+                    free(line->xattrs->ents[j].val);
+                    line->xattrs->ents[j].val = NULL;
+                }
+                line->xattrs->num = 0;
+            } else {
+                ++num;
+            }
           }
         }
         break;
diff --git a/src/util.c b/src/util.c
index e927ada..ca437bf 100644
--- a/src/util.c
+++ b/src/util.c
@@ -40,7 +40,7 @@
 #include "db_config.h"
 #include "util.h"
 
-#define URL_UNSAFE " <>\"#%{}|\\^~[]`@:\033'"
+#define URL_UNSAFE " <>\"#%{}|\\^~[]`@:\033',"
 #define ISPRINT(c) (isascii(c) && isprint(c))
 
 static const char* url_name[] = { 
@@ -180,6 +180,14 @@ void* checked_malloc(size_t size) {
     }
     return p;
 }
+void* checked_strdup(const char *s) {
+    void * p = strdup(s);                                                                      
+    if (p == NULL) {
+        error(0, "strdup: failed to allocate memory");
+        exit(MEMORY_ALLOCATION_FAILURE);
+    }                                                                                          
+    return p;
+}
 
 char *strnesc(const char *unescaped_str, size_t s) {
     int n = escape_str(unescaped_str, NULL, s);
-- 
2.45.2

